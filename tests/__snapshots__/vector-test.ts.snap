// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`vector-tile works 1`] = `
"import {Reader, Writer} from 'protobufjs/minimal';
import * as Long from 'long';


const baseTile: object = {
  layers: null,
}
;

const baseTile_Value: object = {
  stringValue: \\"\\",
  floatValue: 0,
  doubleValue: 0,
  intValue: 0,
  uintValue: 0,
  sintValue: 0,
  boolValue: false,
}
;

export function decodeTile_Value(reader: Reader, length?: number): Tile_Value {
  let end = length === undefined ? reader.len : reader.pos + length;
  const message = Object.create(baseTile_Value) as Tile_Value;
  while (reader.pos < end) {
    const tag = reader.uint32();
    switch (tag >>> 3) {
      case 1:
        message.stringValue = reader.string();
        break;
      case 2:
        message.floatValue = reader.float();
        break;
      case 3:
        message.doubleValue = reader.double();
        break;
      case 4:
        message.intValue = longToNumber(reader.int64() as Long);
        break;
      case 5:
        message.uintValue = longToNumber(reader.uint64() as Long);
        break;
      case 6:
        message.sintValue = longToNumber(reader.sint64() as Long);
        break;
      case 7:
        message.boolValue = reader.bool();
        break;
      default:
        reader.skipType(tag & 7);
        break;
    }
  }
  return message;
}

export function encodeTile_Value(message: Tile_Value, writer: Writer = new Writer()): Writer {
  writer.uint32(10).string(message.stringValue);
  writer.uint32(21).float(message.floatValue);
  writer.uint32(25).double(message.doubleValue);
  writer.uint32(32).int64(message.intValue);
  writer.uint32(40).uint64(message.uintValue);
  writer.uint32(48).sint64(message.sintValue);
  writer.uint32(56).bool(message.boolValue);
  return writer;
}

export interface Tile_Value {
  stringValue: string;
  floatValue: number;
  doubleValue: number;
  intValue: number;
  uintValue: number;
  sintValue: number;
  boolValue: boolean;
}

const baseTile_Feature: object = {
  id: 0,
  tags: 0,
  type: 0,
  geometry: 0,
}
;

export function decodeTile_Feature(reader: Reader, length?: number): Tile_Feature {
  let end = length === undefined ? reader.len : reader.pos + length;
  const message = Object.create(baseTile_Feature) as Tile_Feature;
  message.tags = [];
  message.geometry = [];
  while (reader.pos < end) {
    const tag = reader.uint32();
    switch (tag >>> 3) {
      case 1:
        message.id = longToNumber(reader.uint64() as Long);
        break;
      case 2:
        if ((tag & 7) === 2) {
          const end2 = reader.uint32() + reader.pos;
          while (reader.pos < end2) {
            message.tags.push(reader.uint32());
          }
        } else {
          message.tags.push(reader.uint32());
        }
        break;
      case 3:
        message.type = reader.int32();
        break;
      case 4:
        if ((tag & 7) === 2) {
          const end2 = reader.uint32() + reader.pos;
          while (reader.pos < end2) {
            message.geometry.push(reader.uint32());
          }
        } else {
          message.geometry.push(reader.uint32());
        }
        break;
      default:
        reader.skipType(tag & 7);
        break;
    }
  }
  return message;
}

export function encodeTile_Feature(message: Tile_Feature, writer: Writer = new Writer()): Writer {
  writer.uint32(8).uint64(message.id);
  writer.uint32(18).fork();
  for (const v of message.tags) {
    writer.uint32(v);
  }
  writer.ldelim();
  writer.uint32(24).int32(message.type);
  writer.uint32(34).fork();
  for (const v of message.geometry) {
    writer.uint32(v);
  }
  writer.ldelim();
  return writer;
}

export interface Tile_Feature {
  id: number;
  tags: Array<number>;
  type: Tile_GeomType;
  geometry: Array<number>;
}

const baseTile_Layer: object = {
  version: 0,
  name: \\"\\",
  features: null,
  keys: \\"\\",
  values: null,
  extent: 0,
}
;

export function decodeTile_Layer(reader: Reader, length?: number): Tile_Layer {
  let end = length === undefined ? reader.len : reader.pos + length;
  const message = Object.create(baseTile_Layer) as Tile_Layer;
  message.features = [];
  message.keys = [];
  message.values = [];
  while (reader.pos < end) {
    const tag = reader.uint32();
    switch (tag >>> 3) {
      case 15:
        message.version = reader.uint32();
        break;
      case 1:
        message.name = reader.string();
        break;
      case 2:
        message.features.push(decodeTile_Feature(reader, reader.uint32()));
        break;
      case 3:
        message.keys.push(reader.string());
        break;
      case 4:
        message.values.push(decodeTile_Value(reader, reader.uint32()));
        break;
      case 5:
        message.extent = reader.uint32();
        break;
      default:
        reader.skipType(tag & 7);
        break;
    }
  }
  return message;
}

export function encodeTile_Layer(message: Tile_Layer, writer: Writer = new Writer()): Writer {
  writer.uint32(120).uint32(message.version);
  writer.uint32(10).string(message.name);
  for (const v of message.features) {
    encodeTile_Feature(v, writer.uint32(18).fork()).ldelim();
  }
  for (const v of message.keys) {
    writer.uint32(26).string(v);
  }
  for (const v of message.values) {
    encodeTile_Value(v, writer.uint32(34).fork()).ldelim();
  }
  writer.uint32(40).uint32(message.extent);
  return writer;
}

export interface Tile_Layer {
  version: number;
  name: string;
  features: Array<Tile_Feature>;
  keys: Array<string>;
  values: Array<Tile_Value>;
  extent: number;
}

export function decodeTile(reader: Reader, length?: number): Tile {
  let end = length === undefined ? reader.len : reader.pos + length;
  const message = Object.create(baseTile) as Tile;
  message.layers = [];
  while (reader.pos < end) {
    const tag = reader.uint32();
    switch (tag >>> 3) {
      case 3:
        message.layers.push(decodeTile_Layer(reader, reader.uint32()));
        break;
      default:
        reader.skipType(tag & 7);
        break;
    }
  }
  return message;
}

export function encodeTile(message: Tile, writer: Writer = new Writer()): Writer {
  for (const v of message.layers) {
    encodeTile_Layer(v, writer.uint32(26).fork()).ldelim();
  }
  return writer;
}

export interface Tile {
  layers: Array<Tile_Layer>;
}

export enum Tile_GeomType {
  UNKNOWN = 0,
  POINT = 1,
  LINESTRING = 2,
  POLYGON = 3,
}

function longToNumber(long: Long) {
  if (long.gt(Number.MAX_VALUE)) {
    throw new Error(\\"Value is larger than Number.MAX_VALUE\\");;
  }
  return long.toNumber();
}
"
`;
